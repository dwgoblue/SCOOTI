function save_metadata_json(filename, model, obj, obj_type, obj_c, ...
    root_path, data_path, out_name, ctrl, kappa, rho, medium, ...
    genekoflag, rxnkoflag, media_perturbation, upsheet, dwsheet, ...
    model_path, CFR_model, extra_weight, algorithm)

  % Extract nonzero objectives
  obj_indices = find(model.c ~= 0);
  if ~isempty(obj_indices)
    obj_weights = model.c(obj_indices);
    obj_rxns = model.rxns(obj_indices);
  else
    obj_weights = 0;
    obj_rxns = '';
  end

  % Decide sample name
  if ctrl == 1
    input_path = data_path;
  else
    input_path = sprintf('%s%s', upsheet, dwsheet);
  end

  % Build metadata struct
  metadata = struct(...
    'obj', obj, ...
    'obj_type', obj_type, ...
    'obj_c', obj_c, ...
    'output_path', root_path, ...
    'input_path', input_path, ...
    'file_name', out_name, ...
    'with_constraint', ctrl, ...
    'CFR_kappa', kappa, ...
    'CFR_rho', rho, ...
    'medium', medium, ...
    'genekoflag', genekoflag, ...
    'rxnkoflag', rxnkoflag, ...
    'media_perturbation', media_perturbation, ...
    'objWeights', obj_weights, ...
    'objRxns', obj_rxns, ...
    'model_path', model_path, ...
    'upStage', upsheet, ...
    'dwStage', dwsheet, ...
    'CFRModel', CFR_model, ...
    'extraWeight', extra_weight, ...
    'algorithm', algorithm ...
  );



  % Encode and write to JSON file
  json_str = jsonencode(metadata);
  json_file = sprintf('%s_metadata.json', filename);
  fid = fopen(json_file, 'w');
  fprintf(fid, '%s', json_str);
  fclose(fid);
end

